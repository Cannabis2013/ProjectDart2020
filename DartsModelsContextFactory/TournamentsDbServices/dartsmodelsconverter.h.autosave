#ifndef DARTSMODELSCONVERTER_H
#define DARTSMODELSCONVERTER_H
#include "ModelsContext/DbSLAs/imodelsconverter.h"
#include <QJsonArray>
#include <QJsonDocument>
#include <qjsonobject.h>
#include <ModelsContext/ModelsSLAs/imodel.h>
#include <DartsModelsContext/TournamentModels/dartstournament.h>
class DartsModelsConverter : public IModelsConverter<IModel<QUuid>,QByteArray>
{
public:
    virtual Converted convert(const QVector<Model *> &models) const override
    {
        QJsonArray arr;
        for (auto& model : models)
            arr << toJsonObject(dynamic_cast<AbstractDartsTournament*>(model));
        return QJsonDocument(arr).toJson();
    }
    virtual QVector<Model *> convert(const Converted &byteArray) const override
    {
        
    }
private:
    QJsonObject toJsonObject(AbstractDartsTournament* model) const
    {
        QJsonObject obj;
        obj["tournamentId"] = model->id().toString(QUuid::WithoutBraces);
        obj["title"] = model->title();
        obj["gameMode"] = model->gameMode();
        obj["keyPoint"] = model->initialRemaining();
        obj["inputHint"] = model->inputHint();
        obj["winnerId"] = model->winnerId().toString(QUuid::WithoutBraces);
        obj["winnerName"] = model->winnerName();
        obj["assignedPlayerDetails"] = fromPlayerDetails(model);
        obj["totalTurns"] = model->totalTurns();
        obj["turnIndex"] = model->turnIndex();
        obj["roundIndex"] = model->roundIndex();
        obj["setIndex"] = model->setIndex();
        obj["attemptIndex"] = model->attemptIndex();
        return obj;
    }
    QJsonObject toJsonObject(const QUuid &id, const QString &name) const
    {
        QJsonObject obj;
        obj["playerId"] = id.toString(QUuid::WithoutBraces);
        obj["playerName"] = name;
        return obj;
    }
    QJsonArray fromPlayerDetails(IModel<QUuid> *model) const
    {
        QJsonArray arr;
        auto tournament = dynamic_cast<ITournament*>(model);
        for (int i = 0; i <tournament->playerNames().count() ; ++i) {
            auto id = tournament->playerIds().at(i);
            auto name = tournament->playerNames().at(i);
            arr << toJsonObject(id,name);
        }
        return arr;
    }
    const QVector<IModel<QUuid>*> toModels(const QJsonArray &arr) const
    {
        QVector<IModel<QUuid>*> list;
        for (const auto& jsonValue : arr)
            list << toModel(jsonValue.toObject());
        return list;
    }
    AbstractDartsTournament* toModel(const QJsonObject& obj) const
    {
        auto tournament = DartsTournament::createInstance();
        tournament->setId(toId(obj,"tournamentId",QUuid::createUuid().toString(QUuid::WithoutBraces)));
        tournament->setTitle(obj.value("title").toString());
        tournament->setGameMode(obj.value("gameMode").toInt());
        tournament->setKeyPoint(obj.value("keyPoint").toInt());
        tournament->setInputMode(obj.value("inputHint").toInt());
        tournament->setStatus(obj.value("status").toInt());
        tournament->setWinnerId();
        tournament->setWinnerName(obj.value("winnerName").toString(""));
        tournament->setTotalTurns(obj.value("totalTurns").toInt(0));
        tournament->setTurnIndex(obj.value("turnIndex").toInt(0));
        tournament->setRoundIndex(obj.value("roundIndex").toInt(1));
        tournament->setSetIndex(obj.value("setIndex").toInt(0));
        tournament->setAttemptIndex(obj.value("attemptIndex").toInt(0));
        setTournamentPlayerDetails(tournament,obj);
        return tournament;
    }
    void setTournamentPlayerDetails(DartsTournament *tournament, const QJsonObject &obj) const
    {
        QVector<QUuid> playerIds;
        QVector<QString> playerNames;
        auto arr = obj.value("assignedPlayerDetails").toArray();
        for (const auto &jsonvalue : arr) {
            auto jsonObject = jsonvalue.toObject();
            playerIds << QUuid::fromString(jsonObject.value("playerId").toString());
            playerNames << jsonObject.value("playerName").toString();
        }
        tournament->setPlayerIds(playerIds);
        tournament->setPlayerNames(playerNames);
    }
};
#endif // DARTSMODELSCONVERTER_H
